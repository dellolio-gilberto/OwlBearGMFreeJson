const u=/^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i,i=t=>{if(typeof t!="string")throw new TypeError("Invalid argument expected string");const r=t.match(u);if(!r)throw new Error(`Invalid argument not valid semver ('${t}' received)`);return r.shift(),r},a=t=>t==="*"||t==="x"||t==="X",p=t=>{const r=parseInt(t,10);return isNaN(r)?t:r},g=(t,r)=>typeof t!=typeof r?[String(t),String(r)]:[t,r],m=(t,r)=>{if(a(t)||a(r))return 0;const[e,n]=g(p(t),p(r));return e>n?1:e<n?-1:0},d=(t,r)=>{for(let e=0;e<Math.max(t.length,r.length);e++){const n=m(t[e]||"0",r[e]||"0");if(n!==0)return n}return 0},y=(t,r)=>{const e=i(t),n=i(r),o=e.pop(),s=n.pop(),c=d(e,n);return c!==0?c:o&&s?d(o.split("."),s.split(".")):o||s?o?-1:1:0},x=(t,r,e)=>{h(e);const n=y(t,r);return l[e].includes(n)},l={">":[1],">=":[0,1],"=":[0],"<=":[-1,0],"<":[-1],"!=":[-1,1]},f=Object.keys(l),h=t=>{if(typeof t!="string")throw new TypeError(`Invalid operator type, expected string but got ${typeof t}`);if(f.indexOf(t)===-1)throw new Error(`Invalid operator, expected one of ${f.join("|")}`)};export{x as c};
